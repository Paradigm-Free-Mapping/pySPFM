# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
executors:
  docker-slim_trial:
    environment:
      IMAGE_NAME: connpfm/connpfm_slim_trial
    docker:
      - image: circleci/buildpack-deps:stretch

  docker-slim_latest:
    environment:
      IMAGE_NAME: connpfm/connpfm_slim_latest
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  py_env:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/pySPFM
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/pySPFM
      - restore_cache: # ensure this step occurs *before* installing dependencies
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run: # will overwrite pySPFM installation each time
          name: Generate environment
          command: |
            if [[ -e /opt/conda/envs/py<< parameters.PYTHON >>_env ]]; then
                echo "Restoring environment from cache"
                source activate py<< parameters.PYTHON >>_env
            else
                conda create -n py<< parameters.PYTHON >>_env python=<< parameters.PYTHON >> -yq
                source activate py<< parameters.PYTHON >>_env
                pip install -e .[tests,doc]
            fi
      - save_cache: # environment cache tied to requirements
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
          paths:
            - "/opt/conda/envs/py<< parameters.PYTHON >>_env"

  py_unittest:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/pySPFM
    docker:
      - image: connpfm/afni_miniconda
    steps:
      - attach_workspace: # get pySPFM
          at: /tmp
      - restore_cache: # load environment
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run:
          name: Run tests and compile coverage
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py<< parameters.PYTHON >>_env /opt/miniconda-latest/envs/py<< parameters.PYTHON >>_env
            source activate py<< parameters.PYTHON >>_env
            make unittest
          no_output_timeout: 20m
      - codecov/upload:
          file: /tmp/src/pySPFM/coverage.xml

  py_integration:
    parameters:
      PYTHON:
        type: string
    working_directory: /tmp/src/pySPFM
    docker:
      - image: connpfm/afni_miniconda
    resource_class: large
    steps:
      - attach_workspace: # get pySPFM
          at: /tmp
      - restore_cache: # load environment
          key: v1-{{ checksum "pyproject.toml" }}-{{ "<< parameters.PYTHON >>" }}
      - run:
          name: Run tests and compile coverage
          command: |
            apt-get update
            apt-get install -yqq make
            apt-get install -yqq curl
            cp -r /opt/conda/envs/py<< parameters.PYTHON >>_env /opt/miniconda-latest/envs/py<< parameters.PYTHON >>_env
            source activate py<< parameters.PYTHON >>_env
            make integrationtest
          no_output_timeout: 30m
      - codecov/upload:
          file: /tmp/src/pySPFM/coverage.xml

  build_docs:
    working_directory: /tmp/src/pySPFM
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace: # get pySPFM
          at: /tmp
      - restore_cache: # load environment
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.9" }}
      - run:
          name: Build documentation
          command: |
            source activate py3.9_env
            apt-get update
            apt-get install -yqq make pandoc
            make -C docs html
          no_output_timeout: 30m
      - store_artifacts:
          path: /tmp/src/pySPFM/docs/_build/html

  style_check:
    working_directory: /tmp/src/pySPFM
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace: # get pySPFM
          at: /tmp
      - restore_cache: # load environment
          key: v1-{{ checksum "pyproject.toml" }}-{{ "3.9" }}
      - run:
          name: Linting
          command: |
            source activate py3.9_env
            apt-get update
            apt-get install -yqq make
            make lint
      - store_artifacts:
          path: /tmp/data/lint

workflows:
  version: 2.1
  run_tests:
    jobs:
      - py_env:
          name: py_env-<< matrix.PYTHON >>
          matrix:
            parameters:
              PYTHON: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      - style_check:
          requires:
            - py_env-3.9
      - py_unittest:
          name: py_unittest-<< matrix.PYTHON >>
          matrix:
            parameters:
              PYTHON: ["3.8", "3.9", "3.10", "3.11", "3.12"]
          requires:
            - py_env-<< matrix.PYTHON >>
      - py_integration:
          name: py_integration-<< matrix.PYTHON >>
          matrix:
            parameters:
              PYTHON: ["3.8", "3.9", "3.10", "3.11", "3.12"]
          requires:
            - py_env-<< matrix.PYTHON >>
      - build_docs:
          requires:
            - py_env-3.9
